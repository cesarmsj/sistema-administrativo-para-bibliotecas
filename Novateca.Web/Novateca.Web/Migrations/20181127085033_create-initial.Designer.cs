// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Novateca.Web.Models;

namespace Novateca.Web.Migrations
{
    [DbContext(typeof(NovatecaDbContext))]
    [Migration("20181127085033_create-initial")]
    partial class createinitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Novateca.Web.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<byte[]>("AvatarImage");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("Firstname")
                        .HasMaxLength(40);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("Lastname")
                        .HasMaxLength(80);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("URLProfilePicture")
                        .HasColumnName("URLProfilePicture")
                        .HasMaxLength(255);

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("User_CPF")
                        .HasColumnName("User_CPF")
                        .HasMaxLength(11);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Novateca.Web.Models.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BookID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abstract")
                        .HasColumnName("Abstract");

                    b.Property<string>("AuthorMain")
                        .IsRequired();

                    b.Property<string>("Authors")
                        .IsRequired();

                    b.Property<byte[]>("AvatarImage");

                    b.Property<string>("BookSubject")
                        .IsRequired()
                        .HasColumnName("BookSubject")
                        .HasMaxLength(80);

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnName("Edition")
                        .HasMaxLength(20);

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnName("ISBN")
                        .HasMaxLength(255);

                    b.Property<string>("PlaceOfPublication")
                        .IsRequired()
                        .HasColumnName("PlaceOfPublication")
                        .HasMaxLength(80);

                    b.Property<string>("PublishingCompany")
                        .IsRequired()
                        .HasColumnName("PublishingCompany")
                        .HasMaxLength(255);

                    b.Property<string>("SubTitle")
                        .HasColumnName("Subtitle")
                        .HasMaxLength(255);

                    b.Property<string>("TitleMain")
                        .IsRequired()
                        .HasColumnName("TitleMain")
                        .HasMaxLength(255);

                    b.Property<int>("TotalPages")
                        .HasColumnName("TotalPages");

                    b.Property<string>("URLEbook")
                        .HasColumnName("URLEbook")
                        .HasMaxLength(255);

                    b.Property<string>("URLImage")
                        .HasColumnName("URLImage")
                        .HasMaxLength(255);

                    b.Property<int>("YearOfPublication")
                        .HasColumnName("YearOfPublication");

                    b.HasKey("BookID")
                        .HasName("BookID");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Novateca.Web.Models.BookComment", b =>
                {
                    b.Property<int>("BookCommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BookCommentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookID");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("Comment")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CommentDate");

                    b.Property<bool>("CommentEnabled");

                    b.Property<int>("UserID");

                    b.HasKey("BookCommentID");

                    b.HasIndex("BookID");

                    b.HasIndex("UserID");

                    b.ToTable("BookComment");
                });

            modelBuilder.Entity("Novateca.Web.Models.BookLike", b =>
                {
                    b.Property<int>("BookLikeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BookLikeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookID");

                    b.Property<DateTime>("LikeDate");

                    b.Property<bool>("LikeEnabled");

                    b.Property<int>("UserId");

                    b.HasKey("BookLikeID");

                    b.HasIndex("BookID");

                    b.HasIndex("UserId");

                    b.ToTable("BookLike");
                });

            modelBuilder.Entity("Novateca.Web.Models.BookLikeInComment", b =>
                {
                    b.Property<int>("BookLikeInCommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BookLikeInCommentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookCommentID");

                    b.Property<DateTime>("LikeDate");

                    b.Property<bool>("LikeEnabled");

                    b.Property<int>("UserId");

                    b.HasKey("BookLikeInCommentID");

                    b.HasIndex("BookCommentID");

                    b.HasIndex("UserId");

                    b.ToTable("BookLikeInComment");
                });

            modelBuilder.Entity("Novateca.Web.Models.BookLoan", b =>
                {
                    b.Property<int>("BookLoanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BookLoanID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookID");

                    b.Property<DateTime>("DevolutionDate");

                    b.Property<DateTime>("DevolutionDateMade");

                    b.Property<DateTime>("LoanDate");

                    b.Property<int>("UserID");

                    b.HasKey("BookLoanID");

                    b.HasIndex("BookID");

                    b.HasIndex("UserID");

                    b.ToTable("BookLoan");
                });

            modelBuilder.Entity("Novateca.Web.Models.FavoriteBook", b =>
                {
                    b.Property<int>("FavoriteBookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FavoriteBookID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookID");

                    b.Property<DateTime>("FavoriteDate");

                    b.Property<bool>("FavoriteEnabled");

                    b.Property<int>("UserID");

                    b.HasKey("FavoriteBookID");

                    b.HasIndex("BookID");

                    b.HasIndex("UserID");

                    b.ToTable("FavoriteBook");
                });

            modelBuilder.Entity("Novateca.Web.Models.FavoriteMultimedia", b =>
                {
                    b.Property<int>("FavoriteMultimediaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FavoriteMultimediaID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FavoriteDate");

                    b.Property<bool>("FavoriteEnabled");

                    b.Property<int>("MultimediaID");

                    b.Property<int>("UserID");

                    b.HasKey("FavoriteMultimediaID");

                    b.HasIndex("MultimediaID");

                    b.HasIndex("UserID");

                    b.ToTable("FavoriteMultimedia");
                });

            modelBuilder.Entity("Novateca.Web.Models.FavoriteNewspaper", b =>
                {
                    b.Property<int>("FavoriteNewspaperID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FavoriteNewspaperID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FavoriteDate");

                    b.Property<bool>("FavoriteEnabled");

                    b.Property<int>("NewspaperID");

                    b.Property<int>("UserID");

                    b.HasKey("FavoriteNewspaperID");

                    b.HasIndex("NewspaperID");

                    b.HasIndex("UserID");

                    b.ToTable("FavoriteNewspaper");
                });

            modelBuilder.Entity("Novateca.Web.Models.Multimedia", b =>
                {
                    b.Property<int>("MultimediaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MultimediaID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abstract")
                        .HasColumnName("Abstract");

                    b.Property<byte[]>("AvatarImage");

                    b.Property<string>("DGM")
                        .IsRequired()
                        .HasColumnName("DGM")
                        .HasMaxLength(100);

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnName("Director")
                        .HasMaxLength(80);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnName("Language")
                        .HasMaxLength(30);

                    b.Property<string>("MultimediaSubject")
                        .IsRequired()
                        .HasColumnName("MultimediaSubject")
                        .HasMaxLength(80);

                    b.Property<string>("NoteOfParticipants")
                        .IsRequired()
                        .HasColumnName("NoteOfParticipants")
                        .HasMaxLength(255);

                    b.Property<string>("PhysicalDescription")
                        .IsRequired()
                        .HasColumnName("PhysicalDescription")
                        .HasMaxLength(80);

                    b.Property<string>("PlaceOfPublication")
                        .IsRequired()
                        .HasColumnName("PlaceOfPublication")
                        .HasMaxLength(80);

                    b.Property<string>("PublishingCompany")
                        .IsRequired()
                        .HasColumnName("PublishingCompany")
                        .HasMaxLength(80);

                    b.Property<string>("SubTitle")
                        .HasColumnName("Subtitle")
                        .HasMaxLength(255);

                    b.Property<string>("TargetAudience")
                        .IsRequired()
                        .HasColumnName("TargetAudience")
                        .HasMaxLength(80);

                    b.Property<string>("TitleMain")
                        .IsRequired()
                        .HasColumnName("TitleMain")
                        .HasMaxLength(255);

                    b.Property<string>("URLImage")
                        .HasColumnName("URLImage")
                        .HasMaxLength(255);

                    b.Property<int>("YearOfPublication")
                        .HasColumnName("YearOfPublication");

                    b.HasKey("MultimediaID")
                        .HasName("MuldimediaID");

                    b.ToTable("Multimedia");
                });

            modelBuilder.Entity("Novateca.Web.Models.MultimediaComment", b =>
                {
                    b.Property<int>("MultimediaCommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MultimediaCommentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("Comment")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CommentDate");

                    b.Property<bool>("CommentEnabled");

                    b.Property<int>("MultimediaID");

                    b.Property<int>("UserID");

                    b.HasKey("MultimediaCommentID");

                    b.HasIndex("MultimediaID");

                    b.HasIndex("UserID");

                    b.ToTable("MultimediaComment");
                });

            modelBuilder.Entity("Novateca.Web.Models.MultimediaLike", b =>
                {
                    b.Property<int>("MultimediaLikeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MultimediaLikeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LikeDate");

                    b.Property<bool>("LikeEnabled");

                    b.Property<int>("MultimediaID");

                    b.Property<int>("UserId");

                    b.HasKey("MultimediaLikeID");

                    b.HasIndex("MultimediaID");

                    b.HasIndex("UserId");

                    b.ToTable("MultimediaLike");
                });

            modelBuilder.Entity("Novateca.Web.Models.MultimediaLikeInComment", b =>
                {
                    b.Property<int>("MultimediaLikeInCommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MultimediaLikeInCommentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LikeDate");

                    b.Property<bool>("LikeEnabled");

                    b.Property<int>("MultimediaCommentID");

                    b.Property<int>("UserId");

                    b.HasKey("MultimediaLikeInCommentID");

                    b.HasIndex("MultimediaCommentID");

                    b.HasIndex("UserId");

                    b.ToTable("MultimediaLikeInComment");
                });

            modelBuilder.Entity("Novateca.Web.Models.MultimediaLoan", b =>
                {
                    b.Property<int>("MultimediaLoanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MultimediaLoanID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DevolutionDate");

                    b.Property<DateTime>("DevolutionDateMade");

                    b.Property<DateTime>("LoanDate");

                    b.Property<int>("MultimediaID");

                    b.Property<int>("UserID");

                    b.HasKey("MultimediaLoanID");

                    b.HasIndex("MultimediaID");

                    b.HasIndex("UserID");

                    b.ToTable("MultimediaLoan");
                });

            modelBuilder.Entity("Novateca.Web.Models.Newspaper", b =>
                {
                    b.Property<int>("NewspaperID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NewspaperID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("AvatarImage");

                    b.Property<string>("CurrentPeriodicity")
                        .IsRequired()
                        .HasColumnName("CurrentPeriodicity")
                        .HasMaxLength(30);

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnName("Edition")
                        .HasMaxLength(20);

                    b.Property<string>("ISSN")
                        .IsRequired()
                        .HasColumnName("ISSN")
                        .HasMaxLength(255);

                    b.Property<string>("NewspaperSubject")
                        .IsRequired()
                        .HasColumnName("NewspaperSubject")
                        .HasMaxLength(20);

                    b.Property<string>("PlaceOfPublication")
                        .IsRequired()
                        .HasColumnName("PlaceOfPublication")
                        .HasMaxLength(80);

                    b.Property<string>("PublishingCompany")
                        .IsRequired()
                        .HasColumnName("PublishingCompany")
                        .HasMaxLength(255);

                    b.Property<string>("SubTitle")
                        .HasColumnName("Subtitle")
                        .HasMaxLength(255);

                    b.Property<string>("TitleMain")
                        .IsRequired()
                        .HasColumnName("TitleMain")
                        .HasMaxLength(255);

                    b.Property<string>("URLImage")
                        .HasColumnName("URLImage")
                        .HasMaxLength(255);

                    b.HasKey("NewspaperID")
                        .HasName("NewspaperID");

                    b.ToTable("Newspaper");
                });

            modelBuilder.Entity("Novateca.Web.Models.NewspaperComment", b =>
                {
                    b.Property<int>("NewspaperCommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NewspaperCommentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("Comment")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CommentDate");

                    b.Property<bool>("CommentEnabled");

                    b.Property<int>("NewspaperID");

                    b.Property<int>("UserID");

                    b.HasKey("NewspaperCommentID");

                    b.HasIndex("NewspaperID");

                    b.HasIndex("UserID");

                    b.ToTable("NewspaperComment");
                });

            modelBuilder.Entity("Novateca.Web.Models.NewspaperLike", b =>
                {
                    b.Property<int>("NewspaperLikeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NewspaperLikeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LikeDate");

                    b.Property<bool>("LikeEnabled");

                    b.Property<int>("NewspaperID");

                    b.Property<int>("UserId");

                    b.HasKey("NewspaperLikeID");

                    b.HasIndex("NewspaperID");

                    b.HasIndex("UserId");

                    b.ToTable("NewspaperLike");
                });

            modelBuilder.Entity("Novateca.Web.Models.NewspaperLikeInComment", b =>
                {
                    b.Property<int>("NewspaperLikeInCommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NewspaperLikeInCommentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LikeDate");

                    b.Property<bool>("LikeEnabled");

                    b.Property<int>("NewspaperCommentID");

                    b.Property<int>("UserId");

                    b.HasKey("NewspaperLikeInCommentID");

                    b.HasIndex("NewspaperCommentID");

                    b.HasIndex("UserId");

                    b.ToTable("NewspaperLikeInComment");
                });

            modelBuilder.Entity("Novateca.Web.Models.NewspaperLoan", b =>
                {
                    b.Property<int>("NewspaperLoanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NewspaperLoanID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DevolutionDate");

                    b.Property<DateTime>("DevolutionDateMade");

                    b.Property<DateTime>("LoanDate");

                    b.Property<int>("NewspaperID");

                    b.Property<int>("UserID");

                    b.HasKey("NewspaperLoanID");

                    b.HasIndex("NewspaperID");

                    b.HasIndex("UserID");

                    b.ToTable("NewspaperLoan");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Novateca.Web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Novateca.Web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Novateca.Web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Novateca.Web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Novateca.Web.Models.BookComment", b =>
                {
                    b.HasOne("Novateca.Web.Models.Book", "Book")
                        .WithMany("BookComments")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Novateca.Web.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("BookComments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Novateca.Web.Models.BookLike", b =>
                {
                    b.HasOne("Novateca.Web.Models.Book", "Book")
                        .WithMany("BookLikes")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Novateca.Web.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("BookLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Novateca.Web.Models.BookLikeInComment", b =>
                {
                    b.HasOne("Novateca.Web.Models.BookComment", "BookComment")
                        .WithMany("BookLikeInComments")
                        .HasForeignKey("BookCommentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Novateca.Web.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("BookLikeInComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Novateca.Web.Models.BookLoan", b =>
                {
                    b.HasOne("Novateca.Web.Models.Book", "Book")
                        .WithMany("BookLoans")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Novateca.Web.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("BookLoans")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Novateca.Web.Models.FavoriteBook", b =>
                {
                    b.HasOne("Novateca.Web.Models.Book", "Book")
                        .WithMany("FavoriteBooks")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Novateca.Web.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("FavoriteBooks")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Novateca.Web.Models.FavoriteMultimedia", b =>
                {
                    b.HasOne("Novateca.Web.Models.Multimedia", "Multimedia")
                        .WithMany("FavoriteMultimedias")
                        .HasForeignKey("MultimediaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Novateca.Web.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("FavoriteMultimedias")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Novateca.Web.Models.FavoriteNewspaper", b =>
                {
                    b.HasOne("Novateca.Web.Models.Newspaper", "Newspaper")
                        .WithMany("FavoriteNewspaper")
                        .HasForeignKey("NewspaperID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Novateca.Web.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("FavoriteNewspapers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Novateca.Web.Models.MultimediaComment", b =>
                {
                    b.HasOne("Novateca.Web.Models.Multimedia", "Multimedia")
                        .WithMany("MultimediaComments")
                        .HasForeignKey("MultimediaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Novateca.Web.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("MultimediaComments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Novateca.Web.Models.MultimediaLike", b =>
                {
                    b.HasOne("Novateca.Web.Models.Multimedia", "Multimedia")
                        .WithMany("MultimediaLikes")
                        .HasForeignKey("MultimediaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Novateca.Web.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("MultimediaLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Novateca.Web.Models.MultimediaLikeInComment", b =>
                {
                    b.HasOne("Novateca.Web.Models.MultimediaComment", "MultimediaComment")
                        .WithMany("MultimediaLikeInComments")
                        .HasForeignKey("MultimediaCommentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Novateca.Web.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("MultimediaLikeInComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Novateca.Web.Models.MultimediaLoan", b =>
                {
                    b.HasOne("Novateca.Web.Models.Multimedia", "Multimedia")
                        .WithMany("MultimediaLoans")
                        .HasForeignKey("MultimediaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Novateca.Web.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("MultimediaLoans")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Novateca.Web.Models.NewspaperComment", b =>
                {
                    b.HasOne("Novateca.Web.Models.Newspaper", "Newspaper")
                        .WithMany("NewspaperComments")
                        .HasForeignKey("NewspaperID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Novateca.Web.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("NewspaperComments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Novateca.Web.Models.NewspaperLike", b =>
                {
                    b.HasOne("Novateca.Web.Models.Newspaper", "Newspaper")
                        .WithMany("NewspaperLikes")
                        .HasForeignKey("NewspaperID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Novateca.Web.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("NewspaperLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Novateca.Web.Models.NewspaperLikeInComment", b =>
                {
                    b.HasOne("Novateca.Web.Models.NewspaperComment", "NewspaperComment")
                        .WithMany("NewspaperLikeInComments")
                        .HasForeignKey("NewspaperCommentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Novateca.Web.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("NewspaperLikeInComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Novateca.Web.Models.NewspaperLoan", b =>
                {
                    b.HasOne("Novateca.Web.Models.Newspaper", "Newspaper")
                        .WithMany("NewspaperLoans")
                        .HasForeignKey("NewspaperID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Novateca.Web.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("NewspaperLoans")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
